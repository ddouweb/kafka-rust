---
description: 
globs: 
alwaysApply: true
---
# 项目目标和设计思路

## 项目目标
- 使用 Rust 实现单节点的 Kafka 系统，后续扩展为集群。
- 尽可能靠近 Kafka 的策略和思想，实现核心功能。

## 项目结构
- `rust_kafka`：项目根目录，作为程序的启动入口。
- `broker`：核心任务库，处理外部请求，存储和读取消息，维护 Topic、Partition、Offset 和 Replication。
- `client`：客户端库，包含 Producer 和 Consumer，用于生产和消费消息。
- `cluster`：集群管理库，负责节点发现和集群状态管理。
- `network`：网络库，处理网络请求和响应，定义消息结构和编码解码方法。
- `protocol`：协议库，定义 Kafka 协议的客户端请求类型。
- `queue`：消息队列库，调用 storage 库进行消息读写。
- `replication`：副本管理库，负责副本同步和管理。
- `storage`：存储库，负责消息的持久化存储和读取。

## 设计思路
- **模块化设计**：每个模块职责单一，模块间通过清晰的接口通信。
- **高性能**：使用异步 IO 和 mmap 等技术优化性能。
- **可靠性**：实现消息持久化和故障恢复机制。
- **可扩展性**：支持水平扩展和灵活配置。

## 实现策略
- **消息存储**：使用追加写入日志，支持消息压缩和日志分段。
- **消息处理**：支持批量发送和消息确认机制。
- **集群特性**：实现节点发现和副本管理。
- **性能优化**：使用线程池和无锁设计，支持并行处理。

## 未来扩展
- 扩展为多节点集群，支持节点间通信和数据一致性。
- 增加更多的 Kafka 特性，如消费者组和偏移量管理。