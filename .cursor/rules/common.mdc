---
description: 
globs: 
alwaysApply: true
---
# 通用规则和设计原则

## 设计原则
1. 低耦合高内聚
   - 模块间通过清晰的接口通信
   - 每个模块职责单一
   - 避免循环依赖,且尽量降低依赖

2. 性能优化
   - 使用异步IO
   - 合理使用内存映射
   - 批量处理消息
   - 零拷贝设计

3. 可靠性
   - 消息持久化
   - 故障恢复
   - 数据一致性保证

4. 可扩展性
   - 模块化设计
   - 支持水平扩展
   - 配置灵活

## 实现规范
1. 错误处理
   - 使用Result类型处理错误
   - 提供详细的错误信息
   - 实现错误恢复机制

2. 日志记录
   - 关键操作记录日志
   - 错误信息详细记录
   - 性能指标监控

3. 测试要求
   - 单元测试覆盖核心功能
   - 集成测试验证模块交互
   - 性能测试确保系统性能

4. 文档要求
   - 公共接口必须有文档注释
   - 复杂逻辑需要详细说明
   - 配置项需要说明用途

## 开发流程
1. 功能开发
   - 先设计接口
   - 编写测试用例
   - 实现功能
   - 代码审查

2. 代码提交
   - 提交前运行测试
   - 提交信息清晰
   - 遵循代码规范

3. 版本控制
   - 使用语义化版本
   - 保持向后兼容
   - 重大变更需要文档说明

1. 查看 kafka_core.mdc 中的消息存储部分：
   - 使用追加写入日志
   - 实现日志分段
   - 支持消息压缩

2. 参考 rust_impl.mdc 中的实现规范：
   - 使用适当的 Rust 类型
   - 实现错误处理
   - 考虑并发安全

3. 按照 dev_process.mdc 的流程：
   - 进行需求分析
   - 编写代码
   - 进行测试
   - 进行代码审查

4. 使用 test.mdc 的规范：
   - 编写单元测试
   - 进行性能测试
   - 验证功能正确性
